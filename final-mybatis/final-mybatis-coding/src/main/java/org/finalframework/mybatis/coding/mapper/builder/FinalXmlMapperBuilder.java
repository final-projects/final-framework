package org.finalframework.mybatis.coding.mapper.builder;

import org.finalframework.data.coding.entity.Entity;
import org.finalframework.data.coding.entity.Property;
import org.springframework.lang.NonNull;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

import javax.lang.model.element.ElementKind;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import java.util.ArrayList;
import java.util.List;

/**
 * @author likly
 * @version 1.0
 * @date 2019-10-11 15:24:42
 * @since 1.0
 */
public class FinalXmlMapperBuilder implements XmlMapperBuilder {

    private List<ResultMapXmlMapperBuilder> resultMapXmlMapperBuilders = new ArrayList<>(1);
    private List<MethodXmlMapperBuilder> methodXmlMapperBuilders = new ArrayList<>(8);
    private List<SqlFragmentXmlMapperBuilder> sqlFragmentXmlMapperBuilders = new ArrayList<>();

    {
        resultMapXmlMapperBuilders.add(new DefaultResultMapXmlMapperBuilder());

        methodXmlMapperBuilders.add(new InsertMethodXmlMapperBuilder());
        methodXmlMapperBuilders.add(new UpdateMethodXmlMapperBuilder());
        methodXmlMapperBuilders.add(new DeleteMethodXmlMapperBuilder());
        methodXmlMapperBuilders.add(new SelectMethodXmlMapperBuilder());
        methodXmlMapperBuilders.add(new SelectIdsMethodXmlMapperBuilder());
        methodXmlMapperBuilders.add(new SelectCountMethodXmlMapperBuilder());

        sqlFragmentXmlMapperBuilders.add(new SqlTableFragmentXmlMapperBuilder());
        sqlFragmentXmlMapperBuilders.add(new SqlWhereIdFragmentXmlMapperBuilder());
        sqlFragmentXmlMapperBuilders.add(new SqlWhereIdsFragmentXmlMapperBuilder());
        sqlFragmentXmlMapperBuilders.add(new SqlSelectColumnsFragmentXmlMapperBuilder());

        sqlFragmentXmlMapperBuilders.add(new SqlCriteriaFragmentXmlMapperBuilder());
        sqlFragmentXmlMapperBuilders.add(new SqlOrderFragmentXmlMapperBuilder());
        sqlFragmentXmlMapperBuilders.add(new SqlLimitFragmentXmlMapperBuilder());
        sqlFragmentXmlMapperBuilders.add(new SqlQueryFragmentXmlMapperBuilder());

    }

    @Override
    public void build(Node root, Document document, TypeElement mapper, Entity<Property> entity) {
        generateStartComment(root, document);
        resultMapXmlMapperBuilders.forEach(item -> item.build(root, document, entity));

        mapper.getEnclosedElements()
                .stream()
                .filter(it -> it.getKind() == ElementKind.METHOD)
                .map(it -> (ExecutableElement) it)
                .filter(it -> !it.isDefault())
                .forEach(method -> {
                    for (MethodXmlMapperBuilder methodXmlMapperBuilder : methodXmlMapperBuilders) {
                        if (methodXmlMapperBuilder.supports(method)) {
                            methodXmlMapperBuilder.build(root, document, method, entity);
                        }
                    }
                });


        sqlFragmentXmlMapperBuilders.forEach(item -> item.build(root, document, entity));

        generateEndComment(root, document);

    }

    private void generateStartComment(@NonNull Node root, @NonNull Document document) {
        root.appendChild(document.createTextNode("\n\t"));
        root.appendChild(document.createComment("=============================================================================================================="));
        root.appendChild(document.createTextNode("\n\t"));
        root.appendChild(document.createComment("=====START===============================GENERATED BY FINAL FRAMEWORK===============================START====="));
        root.appendChild(document.createTextNode("\n\t"));
        root.appendChild(document.createComment("=============================================================================================================="));
        root.appendChild(document.createTextNode("\n\t"));
    }

    private void generateEndComment(@NonNull Node root, @NonNull Document document) {
        root.appendChild(document.createComment("=============================================================================================================="));
        root.appendChild(document.createComment("======END================================GENERATED BY FINAL FRAMEWORK================================END======"));
        root.appendChild(document.createComment("=============================================================================================================="));
    }


}
