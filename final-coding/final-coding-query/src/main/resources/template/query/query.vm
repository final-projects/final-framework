#set($package = $query.packageName)
#set($simpleName = $query.simpleName)
#set($properties = $query.entity.properties)
package ${package};

import org.finalframework.data.annotation.enums.PersistentType;
import org.finalframework.data.query.QProperty;
import org.finalframework.data.query.AbsQEntity;
import org.finalframework.data.query.Query;
import org.finalframework.data.query.Criteriable;

import javax.annotation.Generated;

#parse("/template/parse/header.vm")
@Generated("org.finalframework.coding.EntityProcessor")
public final class ${simpleName} {

private final Query query = new Query();

#foreach($property in $properties)

    #set($_returnValue = $simpleName)
    #set($_name = $property.name.substring(0,1).toUpperCase() + $property.name.substring(1))
    #set($_paramterType = $property.type.replace("java.lang.",""))
    #set($_paramterName = $property.name)

/**
* @see Criteriable#eq(Object)
*/
public ${_returnValue} add${_name}Equal(${_paramterType} ${_paramterName}){
query.where(${query.entity.simpleName}.${property.name}.eq(${_paramterName}));
return this;
}

public ${_returnValue} add${_name}NotEqual(${_paramterType} ${_paramterName}){
query.where(${query.entity.simpleName}.${property.name}.neq(${_paramterName}));
return this;
}

public ${_returnValue} add${_name}GreaterThan(${_paramterType} ${_paramterName}){
query.where(${query.entity.simpleName}.${property.name}.gt(${_paramterName}));
return this;
}

public ${_returnValue} add${_name}GreaterThanEqual(${_paramterType} ${_paramterName}){
query.where(${query.entity.simpleName}.${property.name}.gte(${_paramterName}));
return this;
}

#end

}
