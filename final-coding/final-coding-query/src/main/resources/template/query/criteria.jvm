#set($package = $criteria.packageName)
#set($simpleName = $criteria.simpleName)
#set($properties = $criteria.entity.properties)
#set($qentity = $criteria.entity.simpleName)
#set($criteria = $criteria.simpleName)
#* @formatter:off *#
package ${package};

import org.finalframework.data.query.AbsCriteria;
import org.finalframework.data.query.Criteria;
import org.finalframework.data.query.criterion.Criterion;
import org.finalframework.data.query.enums.AndOr;

import javax.annotation.Generated;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;

#parse("/template/parse/header.vm")
@Generated("org.finalframework.coding.query.CriteriaGenerator")
public final class ${criteria} extends AbsCriteria<${criteria}>{

    protected ${criteria}() {
        super(AndOr.AND, Collections.emptyList());
    }

    protected ${criteria}(AndOr andOr) {
        super(andOr, Collections.emptyList());
    }

    protected ${criteria}(AndOr andOr, Collection<Criteria> criteria) {
        super(andOr, criteria, Collections.emptyList());
    }

    protected ${criteria}(AndOr andOr, Collection<Criteria> criteria, Collection<Criterion> criterion) {
        super(andOr, criteria, criterion);
    }

    protected ${criteria} andOr(AndOr andOr, Collection<Criteria> criteria,Collection<Criterion> criterion) {
        return new ${criteria}(andOr, criteria,criterion);
    }


#foreach($property in $properties)
    #set($_returnValue = $criteria)
    #set($_name = $property.name.substring(0,1).toUpperCase() + $property.name.substring(1))
    #set($_paramterType = $property.type.getQualifiedName().toString().replace("java.lang.",""))
    #set($_paramterName = $property.name)

    #set($_start = $_name.format("%-52s",$_name).replaceAll(" ","="))
    #set($_end = $_name.format("%52s",$_name).replaceAll(" ","="))
    #set($_isDate = $property.isDate())

    //==================================================================================================================
    //=====${_start}${_end}=====
    //==================================================================================================================

    /**
     * @see Criteriable#eq(Object)
     */
    public ${_returnValue} add${_name}Equal(${_paramterType} ${_paramterName}){
        add(${qentity}.${property.name}.eq(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#neq(Object)
     */
    public ${_returnValue} add${_name}NotEqual(${_paramterType} ${_paramterName}){
        add(${qentity}.${property.name}.neq(${_paramterName}));
        return this;
    }

    /**
    * @see Criteriable#gt(Object)
    */
    public ${_returnValue} add${_name}GreaterThan(${_paramterType} ${_paramterName}){
        add(${qentity}.${property.name}.gt(${_paramterName}));
        return this;
    }

    /**
    * @see Criteriable#gte(Object)
    */
    public ${_returnValue} add${_name}GreaterThanEqual(${_paramterType} ${_paramterName}){
        add(${qentity}.${property.name}.gte(${_paramterName}));
        return this;
    }


    /**
    * @see Criteriable#lt(Object)
    */
    public ${_returnValue} add${_name}LessThan(${_paramterType} ${_paramterName}){
        add(${qentity}.${property.name}.gt(${_paramterName}));
        return this;
    }

    /**
    * @see Criteriable#lte(Object)
    */
    public ${_returnValue} add${_name}LessThanEqual(${_paramterType} ${_paramterName}){
        add(${qentity}.${property.name}.gte(${_paramterName}));
        return this;
    }

    // in operator

    /**
     * @see Criteriable#in(Object[])
     */
    public ${_returnValue} add${_name}In(${_paramterType}... ${_paramterName}){
        add(${qentity}.${property.name}.in(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#in(Collection)
     */
    public ${_returnValue} add${_name}In(Collection<${_paramterType}> ${_paramterName}){
        add(${qentity}.${property.name}.in(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#nin(Object[])
     */
    public ${_returnValue} add${_name}NotIn(${_paramterType}... ${_paramterName}){
        add(${qentity}.${property.name}.in(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#nin(Collection)
     */
    public ${_returnValue} add${_name}NotIn(Collection<${_paramterType}> ${_paramterName}){
        add(${qentity}.${property.name}.in(${_paramterName}));
        return this;
    }

    // null operator

    /**
     * @see Criteriable#isNull()
     */
    public ${_returnValue} add${_name}IsNull(){
        add(${qentity}.${property.name}.isNull());
        return this;
    }

    /**
     * @see Criteriable#isNotNull()
     */
    public ${_returnValue} add${_name}IsNotNull(){
        add(${qentity}.${property.name}.isNotNull());
        return this;
    }

    // like operator


    /**
    * @see Criteriable#startWith(String)
    */
    public ${_returnValue} add${_name}StartWith(String ${_paramterName}){
        add(${qentity}.${property.name}.startWith(${_paramterName}));
        return this;
    }
    /**
    * @see Criteriable#notStartWith(String)
    */
    public ${_returnValue} add${_name}NotStartWith(String ${_paramterName}){
        add(${qentity}.${property.name}.notStartWith(${_paramterName}));
        return this;
    }
    /**
    * @see Criteriable#endWith(String)
    */
    public ${_returnValue} add${_name}EndWith(String ${_paramterName}){
        add(${qentity}.${property.name}.endWith(${_paramterName}));
        return this;
    }
    /**
    * @see Criteriable#notEndWith(String)
    */
    public ${_returnValue} add${_name}NotEndWith(String ${_paramterName}){
        add(${qentity}.${property.name}.notEndWith(${_paramterName}));
        return this;
    }
    /**
    * @see Criteriable#contains(String)
    */
    public ${_returnValue} add${_name}Contains(String ${_paramterName}){
        add(${qentity}.${property.name}.contains(${_paramterName}));
        return this;
    }
    /**
    * @see Criteriable#notContains(String)
    */
    public ${_returnValue} add${_name}NotContains(String ${_paramterName}){
        add(${qentity}.${property.name}.notContains(${_paramterName}));
        return this;
    }
    /**
    * @see Criteriable#like(String)
    */
    public ${_returnValue} add${_name}Like(String ${_paramterName}){
        add(${qentity}.${property.name}.like(${_paramterName}));
        return this;
    }
    /**
    * @see Criteriable#notLike(String)
    */
    public ${_returnValue} add${_name}NotLike(String ${_paramterName}){
        add(${qentity}.${property.name}.notLike(${_paramterName}));
        return this;
    }
##  DATE OPERATOR
    #if($_isDate)
    // date operator
    #set($dates = ['String','Date','long','LocalDateTime','LocalDate'])
    #foreach($date in $dates)
    /**
     * @see Criteriable#date()#eq(${date})
     */
    public ${_returnValue} add${_name}DateEqual(${date} ${_paramterName}){
        add(${qentity}.${property.name}.date().eq(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#date()#neq(${date})
     */
    public ${_returnValue} add${_name}NotDateEqual(${date} ${_paramterName}){
        add(${qentity}.${property.name}.date().neq(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#date()#lt(${date})
     */
    public ${_returnValue} add${_name}DateBefore(${date} ${_paramterName}){
        add(${qentity}.${property.name}.date().lt(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#date()#gt(${date})
     */
    public ${_returnValue} add${_name}DateAfter(${date} ${_paramterName}){
        add(${qentity}.${property.name}.date().gt(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#date()#between(${date},${date})
     */
    public ${_returnValue} add${_name}DateBetween(${date} min,${date} max){
        add(${qentity}.${property.name}.date().between(min, max));
        return this;
    }

    /**
     * @see Criteriable#date()#notBetween(${date},${date})
     */
    public ${_returnValue} add${_name}NotDateBetween(${date} min,${date} max){
        add(${qentity}.${property.name}.date().notBetween(min, max));
        return this;
    }
    #end

    #end

##  FUNCTION OPERATOR
    #set($functions = ['max','min','sum','avg'])

    #foreach($function in $functions)
    #set($_function = $function.substring(0,1).toUpperCase() + $function.substring(1))

    // ${function} operator ${_paramterType}

    /**
     * @see Criteriable#${function}()#eq(Object)
     */
    public ${_returnValue} add${_name}${_function}Equal(Number ${_paramterName}){
        add(${qentity}.${property.name}.${function}().eq(${_paramterName}));
        return this;
    }
    /**
     * @see Criteriable#${function}()#ne(Object)
     */
    public ${_returnValue} add${_name}${_function}NotEqual(Number ${_paramterName}){
        add(${qentity}.${property.name}.${function}().neq(${_paramterName}));
        return this;
    }
    /**
     * @see Criteriable#${function}()#gt(Object)
     */
    public ${_returnValue} add${_name}${_function}GreaterThan(Number ${_paramterName}){
        add(${qentity}.${property.name}.${function}().gt(${_paramterName}));
        return this;
    }
    /**
     * @see Criteriable#${function}()#gte(Object)
     */
    public ${_returnValue} add${_name}${_function}GreaterThanEqual(Number ${_paramterName}){
        add(${qentity}.${property.name}.${function}().gte(${_paramterName}));
        return this;
    }
    /**
     * @see Criteriable#${function}()#lt(Object)
     */
    public ${_returnValue} add${_name}${_function}LessThan(Number ${_paramterName}){
        add(${qentity}.${property.name}.${function}().lt(${_paramterName}));
        return this;
    }
    /**
     * @see Criteriable#${function}()#lte(Object)
     */
    public ${_returnValue} add${_name}${_function}LessThanEqual(Number ${_paramterName}){
            add(${qentity}.${property.name}.${function}().lte(${_paramterName}));
            return this;
            }

    /**
     * @see Criteriable#${function}()#in(Collection)
     */
    public ${_returnValue} add${_name}${_function}In(Collection<Number> ${_paramterName}){
            add(${qentity}.${property.name}.${function}().in(${_paramterName}));
            return this;
            }
    /**
     * @see Criteriable#${function}()#nin(Collection)
     */
    public ${_returnValue} add${_name}${_function}NotIn(Collection<Number> ${_paramterName}){
        add(${qentity}.${property.name}.${function}().nin(${_paramterName}));
        return this;
    }

    /**
     * @see Criteriable#${function}()#between(Object,Object)
     */
    public ${_returnValue} add${_name}${_function}Between(Number min,Number max){
        add(${qentity}.${property.name}.${function}().between(min, max));
        return this;
    }
    /**
     * @see Criteriable#${function}()#notBetween(Object,Object)
     */
    public ${_returnValue} add${_name}${_function}NotBetween(Number min,Number max){
        add(${qentity}.${property.name}.${function}().notBetween(min, max));
        return this;
    }

    #end


#end

}

