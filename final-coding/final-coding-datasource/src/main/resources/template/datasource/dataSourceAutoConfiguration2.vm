#set($dataSource = $dataSourceAutoConfiguration)
package ${dataSource.package};

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
#if($dataSource.primary)
import org.springframework.context.annotation.Primary;
#end
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.core.io.support.ResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

import javax.sql.DataSource;

@Configuration
@EnableAutoConfiguration
@EnableConfigurationProperties(${dataSource.properties}.class)
@MapperScan(basePackages = {${dataSource.basePackages}}, sqlSessionTemplateRef = "${dataSource.sqlSessionTemplate}", sqlSessionFactoryRef = "${dataSource.sqlSessionFactory}")
public class ${dataSource.name} {

public static final String TRANSACTION_MANAGER = "${dataSource.transactionManager}";


private final ${dataSource.properties} properties;

public ${dataSource.name}(${dataSource.properties} properties) {
this.properties = properties;
}


@Bean
#if($dataSource.primary)
@Primary
#end
public DataSource ${dataSource.dataSource}() {
return properties.initializeDataSourceBuilder().build();
}

@Bean
#if($dataSource.primary)
@Primary
#end
public DataSourceTransactionManager ${dataSource.transactionManager}(@Qualifier("${dataSource.dataSource}") DataSource dataSource) {
return new DataSourceTransactionManager(dataSource);
}

@Bean
#if($dataSource.primary)
@Primary
#end
public SqlSessionFactory ${dataSource.sqlSessionFactory}(@Qualifier("${dataSource.dataSource}") DataSource dataSource) throws Exception {
SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
bean.setDataSource(dataSource);
#if($!dataSource.mapperLocations != "")
ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
bean.setMapperLocations(resolver.getResources("${dataSource.mapperLocations}"));
#end
return bean.getObject();
}

@Bean
#if($dataSource.primary)
@Primary
#end
public SqlSessionTemplate ${dataSource.sqlSessionTemplate}(@Qualifier("${dataSource.sqlSessionFactory}") SqlSessionFactory sqlSessionFactory) throws Exception {
return new SqlSessionTemplate(sqlSessionFactory);
}
}
